name: CI

on:
  push:
    branches: [ master, dev ]
  pull_request:
    branches: [ master, dev ]

jobs:
  linux:
    runs-on: ubuntu-latest
    env:
      obs-studio-version: 25.0.8
      maintainer: uni@vrsal.cf
      project: input-overlay
      project-url: github.com/univrsal/input-overlay
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
          submodules: true

    - name: Cache Dependencies
      id: cache-linux-deps
      uses: actions/cache@v1
      with:
        path: obs-studio
        key: obs-deps-${{ env.obs-studio-version }}-linux
    - name: Install dependencies
      if: steps.cache-linux-deps.outputs.cache-hit != 'true'
      run: |
        set -ex
        sudo add-apt-repository -y ppa:obsproject/obs-studio
        sudo apt-get -qq update
                
        sudo apt-get install -y \
          libsdl2-dev \
          libsdl2-image-dev \
          libsdl2-ttf-dev \
          libx11-dev \
          libxtst-dev \
          libxt-dev \
          libxinerama-dev \
          libx11-xcb-dev \
          libxkbcommon-dev \
          libxkbcommon-x11-dev \
          libxkbfile-dev \
          libc-dev-bin \
          libc6-dev git \
          build-essential \
          checkinstall \
          cmake \
          obs-studio \
          qtbase5-dev
          
        sudo wget -O /usr/include/obs/obs-frontend-api.h https://raw.githubusercontent.com/obsproject/obs-studio/25.0.0/UI/obs-frontend-api/obs-frontend-api.h
        sudo ldconfig
    - name: Compile
      shell: bash
      run: | # First build everything
          cmake -S ${{github.workspace}} -B ${{github.workspace}}/build \
            -G "Unix Makefiles" \
            -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/dist \
            -DCMAKE_VERBOSE_MAKEFILE=true -DOBS_FRONTEND_INCLUDE=/usr/include/obs
          cmake --build ${{github.workspace}}/build \
            --parallel 4 \
            --target install
    - name: Compile deb installer
      shell: bash
      run: | # Now only build deb installer
          cmake ${{github.workspace}} -B ${{github.workspace}}/build \
            -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_VERBOSE_MAKEFILE=true \
            -DOBS_FRONTEND_INCLUDE=/usr/include/obs -DENABLE_TOOL=OFF \
            -DENABLE_CLIENT=OFF -DDEB_INSTALLER=ON -DUIOHOOK_ENABLE_INSTALL=off \
            -DGAMEPAD_ENABLE_INSTALL=off -DNETLIB_ENABLE_INSTALL=off
          sudo cmake --build ${{github.workspace}}/build \
            --parallel 4 \
            --target install
          cd ${{github.workspace}}
          export GIT_HASH=$(git rev-parse --short HEAD)
          export PKG_VERSION="1-$GIT_HASH-$GITHUB_REF-git"
          
          [[ "$GITHUB_REF" =~ "^refs/tags/" ]] && export PKG_VERSION="$BRANCH_SHORT_NAME"
          cd ${{github.workspace}}/build
          echo "Packaging version ${PK_VERSION}"
          PAGER="cat" sudo checkinstall -y --type=debian --fstrans=no --nodoc \
            --backup=no --deldoc=yes --install=no \
            --pkgname=input-overlay --pkgversion="${PKG_VERSION}" \
            --pkglicense="GPLv2.0" --maintainer="${{ env.maintainer }}" \
            --pkggroup="video" \
            --pkgsource="https://github.com/$GITHUB_REPOSITORY" \
            --requires="obs-studio \(\>= ${{ env.obs-studio-version }}\), libqt5core5a, libqt5widgets5, qt5-image-formats-plugins" \
            --pakdir="../package"
          
    - name: Cleanup
      shell: bash
      run: |
        rm -rf ${{github.workspace}}/dist/include ${{github.workspace}}/dist/lib
        chmod a+x ${{github.workspace}}/dist/client/client
        chmod a+x ${{github.workspace}}/dist/io-cct/io-cct
        sudo chmod ao+r ${{github.workspace}}/package/*
    - name: Upload binary zip
      uses: actions/upload-artifact@v2
      with:
          name: linux-ubuntu
          path: ${{github.workspace}}/dist/**/*
    - name: Upload installer
      uses: actions/upload-artifact@v2
      with:
        name: debian-installer
        path: ${{github.workspace}}/package/*.deb
  windows:
    name: 'Windows 32+64bit'
    runs-on: [windows-latest]
    env:
      QT_VERSION: '5.10.1'
      WINDOWS_DEPS_VERSION: '2017'
      CMAKE_GENERATOR: "Visual Studio 16 2019"
      CMAKE_SYSTEM_VERSION: "10.0"
      obs-studio-version: 25.0.8
      project: input-overlay
      sdl: 2.0.12 
      sdl_image: 2.0.5
      sdl_ttf: 2.0.15
    steps:
      - name: 'Add msbuild to PATH'
        uses: microsoft/setup-msbuild@v1.0.0
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          path: ${{ github.workspace }}/${{ env.project }}
          submodules: 'recursive'
      - name: 'Checkout OBS'
        uses: actions/checkout@v2
        with:
          repository: obsproject/obs-studio
          path: ${{ github.workspace }}/obs-studio
          submodules: 'recursive'
      - name: 'Get OBS-Studio git info'
        shell: bash
        working-directory: ${{ github.workspace }}/obs-studio
        run: |
          git fetch --prune --unshallow
          echo ::set-env name=OBS_GIT_BRANCH::$(git rev-parse --abbrev-ref HEAD)
          echo ::set-env name=OBS_GIT_HASH::$(git rev-parse --short HEAD)
          echo ::set-env name=OBS_GIT_TAG::$(git describe --tags --abbrev=0)
      - name: 'Checkout last OBS-Studio release (${{ env.OBS_GIT_TAG }})'
        shell: bash
        working-directory: ${{ github.workspace }}/obs-studio
        run: |
          git checkout ${{ env.OBS_GIT_TAG }}
          git submodule update
      - name: 'Get ${{ env.project}} git info'
        shell: bash
        working-directory: ${{ github.workspace }}/${{ env.project}}
        run: |
          git fetch --prune --unshallow
          echo ::set-env name=GIT_BRANCH::${{ github.event.pull_request.head.ref }}
          echo ::set-env name=GIT_HASH::$(git rev-parse --short HEAD)
          echo ::set-env name=GIT_TAG::$(git describe --tags --abbrev=0)
      - name: 'Install prerequisite: QT'
        run: |
          curl -kLO https://cdn-fastly.obsproject.com/downloads/Qt_${{ env.QT_VERSION }}.7z -f --retry 5 -C -
          7z x Qt_${{ env.QT_VERSION }}.7z -o"${{ github.workspace }}\cmbuild\QT"
      - name: 'Install prerequisite: Pre-built OBS dependencies'
        run: |
          curl -kLO https://cdn-fastly.obsproject.com/downloads/dependencies${{ env.WINDOWS_DEPS_VERSION }}.zip -f --retry 5 -C -
          7z x dependencies${{ env.WINDOWS_DEPS_VERSION }}.zip -o"${{ github.workspace }}\cmbuild\deps"
      - name: 'Restore OBS 32-bit build v${{ env.OBS_GIT_TAG }} from cache'
        id: build-cache-obs-32
        uses: actions/cache@v1
        env:
          CACHE_NAME: 'build-cache-obs-32'
        with:
          path: ${{ github.workspace }}/obs-studio/build32
          key: ${{ runner.os }}-${{ env.CACHE_NAME }}-${{ env.OBS_GIT_TAG }}
          restore-keys: |
            ${{ runner.os }}-${{ env.CACHE_NAME }}-
      - name: 'Configure OBS 32-bit'
        if: steps.build-cache-obs-32.outputs.cache-hit != 'true'
        working-directory: ${{ github.workspace }}/obs-studio
        run: |
          mkdir .\build32
          cd .\build32
          cmake -G "${{ env.CMAKE_GENERATOR }}" -A Win32 -DCMAKE_SYSTEM_VERSION="${{ env.CMAKE_SYSTEM_VERSION }}" -DQTDIR="${{ github.workspace }}\cmbuild\QT\${{ env.QT_VERSION }}\msvc2017" -DDepsPath="${{ github.workspace }}\cmbuild\deps\win32" -DBUILD_CAPTIONS=YES -DCOPIED_DEPENDENCIES=NO -DCOPY_DEPENDENCIES=YES ..
      - name: 'Build OBS-Studio 32-bit'
        if: steps.build-cache-obs-32.outputs.cache-hit != 'true'
        working-directory: ${{ github.workspace }}/obs-studio
        run: |
          msbuild /m /p:Configuration=RelWithDebInfo .\build32\libobs\libobs.vcxproj
          msbuild /m /p:Configuration=RelWithDebInfo .\build32\UI\obs-frontend-api\obs-frontend-api.vcxproj
      - name: 'Restore OBS 64-bit build v${{ env.OBS_GIT_TAG }} from cache'
        id: build-cache-obs-64
        uses: actions/cache@v1
        env:
          CACHE_NAME: 'build-cache-obs-64'
        with:
          path: ${{ github.workspace }}/obs-studio/build64
          key: ${{ runner.os }}-${{ env.CACHE_NAME }}-${{ env.OBS_GIT_TAG }}
          restore-keys: |
            ${{ runner.os }}-${{ env.CACHE_NAME }}-
      - name: 'Configure OBS 64-bit'
        if: steps.build-cache-obs-64.outputs.cache-hit != 'true'
        working-directory: ${{ github.workspace }}/obs-studio
        run: |
          mkdir .\build64
          cd .\build64
          cmake -G "${{ env.CMAKE_GENERATOR }}" -A x64 -DCMAKE_SYSTEM_VERSION="${{ env.CMAKE_SYSTEM_VERSION }}" -DQTDIR="${{ github.workspace }}\cmbuild\QT\${{ env.QT_VERSION }}\msvc2017_64" -DDepsPath="${{ github.workspace }}\cmbuild\deps\win64" -DBUILD_CAPTIONS=YES -DCOPIED_DEPENDENCIES=NO -DCOPY_DEPENDENCIES=YES ..
      - name: 'Build OBS-Studio 64-bit'
        if: steps.build-cache-obs-64.outputs.cache-hit != 'true'
        working-directory: ${{ github.workspace }}/obs-studio
        run: |
          msbuild /m /p:Configuration=RelWithDebInfo .\build64\libobs\libobs.vcxproj
          msbuild /m /p:Configuration=RelWithDebInfo .\build64\UI\obs-frontend-api\obs-frontend-api.vcxproj
      - name: 'Restore SDL libraries from cache'
        id: build-sdl2
        uses: actions/cache@v1
        env:
          CACHE_NAME: 'build-cache-sdl2'
        with:
          path: ${{ github.workspace }}/sdl2
          key: ${{ runner.os }}-${{ env.CACHE_NAME }}-sdl2
          restore-keys: |
            ${{ runner.os }}-${{ env.CACHE_NAME }}-   
      - name: Install SDL
        if: steps.build-cache-sdl2.outputs.cache-hit != 'true'
        run: |
          curl -kLO https://www.libsdl.org/release/SDL2-devel-${{ env.sdl }}-VC.zip -f --retry 10 -C -
          7z x SDL2-devel-${{ env.sdl }}-VC.zip -o"${{ github.workspace }}\sdl2\"
      - name: Install SDL Image
        if: steps.build-cache-sdl2.outputs.cache-hit != 'true'
        run: |
          curl -kLO https://www.libsdl.org/projects/SDL_image/release/SDL2_image-devel-${{ env.sdl_image }}-VC.zip -f --retry 10 -C -
          7z x SDL2_image-devel-${{ env.sdl_image }}-VC.zip -o"${{ github.workspace }}\sdl2\"
      - name: Install SDL TTF
        if: steps.build-cache-sdl2.outputs.cache-hit != 'true'
        run: |
          curl -kLO https://www.libsdl.org/projects/SDL_ttf/release/SDL2_ttf-devel-${{ env.sdl_ttf }}-VC.zip -f --retry 10 -C -
          7z x SDL2_ttf-devel-${{ env.sdl_ttf }}-VC.zip -o"${{ github.workspace }}\sdl2\"
      - name: 'Configure input-overlay 64-bit'
        working-directory: ${{ github.workspace }}\${{ env.project }}
        run: |
          mkdir .\build64
          cd .\build64
          cmake -G "${{ env.CMAKE_GENERATOR }}" -A x64 -DCMAKE_SYSTEM_VERSION="${{ env.CMAKE_SYSTEM_VERSION }}" \
            -DQTDIR="${{ github.workspace }}\cmbuild\QT\${{ env.QT_VERSION }}\msvc2017_64" \
            -DDepsPath="${{ github.workspace }}\cmbuild\deps\win64" \
            -DLibObs_DIR="${{ github.workspace }}\obs-studio\build64\libobs" \
            -DLIBOBS_INCLUDE_DIR="${{ github.workspace }}\obs-studio\libobs" \
            -DLIBOBS_LIB="${{ github.workspace }}\obs-studio\build64\libobs\RelWithDebInfo\obs.lib" \
            -DOBS_FRONTEND_LIB="${{ github.workspace }}\obs-studio\build64\UI\obs-frontend-api\RelWithDebInfo\obs-frontend-api.lib" \
            -DPTHREAD_LIB="${{ github.workspace }}\obs-studio\build64\deps\w32-pthreads\RelWithDebInfo\w32-pthreads.lib" \
            -DSDL2_INCLUDE_DIRS="${{ github.workspace }}\sdl2\SDL2-${{ env.sdl }}\include" \
            -DSDL2TTF_INCLUDE_DIRS="${{ github.workspace }}\sdl2\SDL2_ttf-${{ env.sdl_ttf }}\include" \
            -DSDL2IMAGE_INCLUDE_DIRS="${{ github.workspace }}\sdl2\SDL2_image-${{ env.sdl_image }}\include" \
            -DSDL2_LIBRARIES="${{ github.workspace }}\sdl2\SDL2-${{ env.sdl }}\lib\x64\SDL2.lib" \
            -DSDL2TTF_LIBRARIES="${{ github.workspace }}\sdl2\SDL2_ttf-${{ env.sdl_ttf }}\lib\x64\SDL2_ttf.lib" \
            -DSDL2IMAGE_LIBRARIES="${{ github.workspace }}\sdl2\SDL2_image-${{ env.sdl_image }}\lib\x64\SDL2_image.lib" ..
      - name: 'Configure input-overlay 32-bit'
        working-directory: ${{ github.workspace }}/${{ env.project }}
        run: |
          mkdir .\build32
          cd .\build32
          cmake -G "${{ env.CMAKE_GENERATOR }}" -A Win32 -DCMAKE_SYSTEM_VERSION="${{ env.CMAKE_SYSTEM_VERSION }}" \
          -DQTDIR="${{ github.workspace }}\cmbuild\QT\${{ env.QT_VERSION }}\msvc2017" \
          -DDepsPath="${{ github.workspace }}\cmbuild\deps\win32" \
          -DLibObs_DIR="${{ github.workspace }}\obs-studio\build32\libobs" \
          -DLIBOBS_INCLUDE_DIR="${{ github.workspace }}\obs-studio\libobs" \
          -DLIBOBS_LIB="${{ github.workspace }}\obs-studio\build32\libobs\RelWithDebInfo\obs.lib" \
          -DOBS_FRONTEND_LIB="${{ github.workspace }}\obs-studio\build32\UI\obs-frontend-api\RelWithDebInfo\obs-frontend-api.lib" \
          -DPTHREAD_LIB="${{ github.workspace }}\obs-studio\build32\deps\w32-pthreads\RelWithDebInfo\w32-pthreads.lib" \
          -DSDL2_INCLUDE_DIRS="${{ github.workspace }}\sdl2\SDL2-${{ env.sdl }}\include" \
          -DSDL2TTF_INCLUDE_DIRS="${{ github.workspace }}\sdl2\SDL2_ttf-${{ env.sdl_ttf }}\include" \
          -DSDL2IMAGE_INCLUDE_DIRS="${{ github.workspace }}\sdl2\SDL2_image-${{ env.sdl_image }}\include" \
          -DSDL2_LIBRARIES="${{ github.workspace }}\sdl2\SDL2-${{ env.sdl }}\lib\x86\SDL2.lib" \
          -DSDL2TTF_LIBRARIES="${{ github.workspace }}\sdl2\SDL2_ttf-${{ env.sdl_ttf }}\lib\x86\SDL2_ttf.lib" \
          -DSDL2IMAGE_LIBRARIES="${{ github.workspace }}\sdl2\SDL2_image-${{ env.sdl_image }}\lib\x86\SDL2_image.lib" ..  
      - name: 'Build ${{ env.project }} 64-bit'
        working-directory: ${{ github.workspace }}/${{ env.project }}
        run: msbuild /m /p:Configuration=RelWithDebInfo .\build64\io-base.sln
      - name: 'Build ${{ env.project }} 32-bit'
        working-directory: ${{ github.workspace }}/${{ env.project }}
        run: msbuild /m /p:Configuration=RelWithDebInfo .\build32\io-base.sln
      - name: 'Set release filename'
        shell: bash
        run: |
          FILENAME="${{ env.project }}-${{ env.GIT_TAG }}-Windows"
          echo "::set-env name=WIN_FILENAME::$FILENAME"
      - name: 'Package ${{ env.project }}'
        working-directory: ${{ github.workspace }}/${{ env.project }}
        run: |
          mkdir build-package\plugin\obs-plugins\64bit
          mkdir build-package\plugin\obs-plugins\32bit
          mkdir build-package\plugin\data\obs-plugins\${{ env.project }}\
          mkdir build-package\plugin\bin\64bit
          mkdir build-package\plugin\bin\32bit
          mkdir build-package\cct\x86
          mkdir build-package\cct\x64
          mkdir build-package\client
          
          robocopy .\build64\plugin\RelWithDebInfo .\build-package\plugin\obs-plugins\64bit\ ${{ env.project }}.dll ${{ env.project }}.pdb
          robocopy .\build64\plugin\RelWithDebInfo .\build-package\plugin\bin\64bit\ ${{ env.project }}.dll ${{ env.project }}.pdb
          robocopy .\build32\plugin\RelWithDebInfo .\build-package\plugin\obs-plugins\32bit\ ${{ env.project }}.dll ${{ env.project }}.pdb
          robocopy .\build32\plugin\RelWithDebInfo .\build-package\plugin\bin\32bit\ ${{ env.project }}.dll ${{ env.project }}.pdb
          robocopy /E .\projects\plugin\data .\build-package\plugin\data\obs-plugins\${{ env.project }}
          
          robocopy .\build64\client\RelWithDebInfo .\build-package\client\ client.exe
          ren .\build-package\client\client.exe client.x64.exe
          robocopy .\build32\client\RelWithDebInfo .\build-package\client\ client.exe
          ren .\build-package\client\client.exe client.x86.exe
          
          robocopy .\build64\cct\RelWithDebInfo .\build-package\cct\x64\ io-cct.exe
          robocopy .\build64\cct\RelWithDebInfo .\build-package\cct\x64\ *.dll
          robocopy .\build32\cct\RelWithDebInfo .\build-package\cct\x86\ io-cct.exe
          robocopy .\build32\cct\RelWithDebInfo .\build-package\cct\x86\ *.dll
          robocopy /E .\projects\cct\res .\build-package\cct\res
          
          cd .\build-package\cct\x64\
          mklink /D res ..\res
          cd ..\x86
          mklink /D res ..\res
          
          cd ${{ github.workspace }}/${{ env.project }}
          mkdir release
          7z a ".\release\${{ env.WIN_FILENAME }}.zip" ".\build-package\*"
      - name: 'Publish ${{ env.WIN_FILENAME }}.zip'
        if: success()
        uses: actions/upload-artifact@v2-preview
        with:
          name: '${{ env.GIT_TAG }}-Windows'
          path: ${{ github.workspace }}\${{ env.project }}\release\*.zip
          
